class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] combinedNums = new int[nums1.length + nums2.length];
        for (int i = 0; i < nums1.length; i++) {
            combinedNums[i] = nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            combinedNums[nums1.length + i] = nums2[i];
        }
        mergeSort(combinedNums);
        if (combinedNums.length % 2 == 0) {
            return 1.0 * ((combinedNums[combinedNums.length / 2] + combinedNums[combinedNums.length / 2 - 1]) / 2.0);
        }
        else {
            return 1.0 * combinedNums[combinedNums.length / 2];
        }

    }
    public static void mergeSort(int[] array) {
        if (array == null || array.length <= 1) {
            return;
        }
        int mid = array.length / 2;
        int[] leftArray = new int[mid];
        int[] rightArray = new int[array.length - mid];
        System.arraycopy(array, 0, leftArray, 0, mid);
        if (array.length - mid >= 0)
            System.arraycopy(array, mid, rightArray,
                              0, array.length - mid);
        mergeSort(leftArray);
        mergeSort(rightArray);
        merge(leftArray, rightArray, array);
    }
    private static void merge(int[] leftArray, int[] rightArray, int[] array) {
        int i = 0, j = 0, k = 0;
        while (i < leftArray.length && j < rightArray.length) {
            if (leftArray[i] <= rightArray[j]) {
                array[k++] = leftArray[i++];
            } else {
                array[k++] = rightArray[j++];
            }
        }
        while (i < leftArray.length) {
            array[k++] = leftArray[i++];
        }
        while (j < rightArray.length) {
            array[k++] = rightArray[j++];
        }
    }
}
